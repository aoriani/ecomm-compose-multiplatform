package dev.aoriani.ecomm.config

import com.expediagroup.graphql.server.ktor.GraphQL
import dev.aoriani.ecomm.domain.usecases.GetAllProductsUseCase
import dev.aoriani.ecomm.domain.usecases.GetProductByIdUseCase
import dev.aoriani.ecomm.presentation.graphql.hooks.ProductSchemaGeneratorHooks
import dev.aoriani.ecomm.presentation.graphql.queries.ProductQuery
import io.ktor.server.application.Application
import io.ktor.server.application.install
import io.ktor.server.plugins.di.dependencies

/**
 * Configure the GraphQL server.
 *
 * Installs Expedia Group's Ktor `GraphQL` plugin and configures:
 * - Schema packages: `dev.aoriani.ecomm.presentation.graphql.models`, `java.math`.
 * - Query resolvers: `ProductQuery` wired with domain use cases.
 * - Schema hooks: `ProductSchemaGeneratorHooks` for customizations.
 *
 * The schema is generated by scanning the configured packages for GraphQL
 * types/directives and binding them to the provided resolvers. Use cases are
 * resolved via Ktor's DI (`dependencies`).
 */
internal fun Application.configureGraphQL() {
    install(GraphQL) {
        schema {
            packages = listOf("dev.aoriani.ecomm.presentation.graphql.models", "java.math")
            val getAllProductsUseCase: GetAllProductsUseCase by dependencies
            val getProductByIdUseCase: GetProductByIdUseCase by dependencies
            queries = listOf(
                ProductQuery(
                    getAllProducts = getAllProductsUseCase,
                    getProductById = getProductByIdUseCase
                )
            )
            hooks = ProductSchemaGeneratorHooks
        }
    }
}
